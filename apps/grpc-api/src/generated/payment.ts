// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "ecommerce";

export interface ProcessPaymentRequest {
  userId: string;
  amount: number;
  orderId: string;
}

export interface ProcessPaymentResponse {
  success: boolean;
  transactionId: string;
}

function createBaseProcessPaymentRequest(): ProcessPaymentRequest {
  return { userId: "", amount: 0, orderId: "" };
}

export const ProcessPaymentRequest: MessageFns<ProcessPaymentRequest> = {
  encode(message: ProcessPaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.amount !== 0) {
      writer.uint32(17).double(message.amount);
    }
    if (message.orderId !== "") {
      writer.uint32(26).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessPaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessPaymentRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
    };
  },

  toJSON(message: ProcessPaymentRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessPaymentRequest>, I>>(base?: I): ProcessPaymentRequest {
    return ProcessPaymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessPaymentRequest>, I>>(object: I): ProcessPaymentRequest {
    const message = createBaseProcessPaymentRequest();
    message.userId = object.userId ?? "";
    message.amount = object.amount ?? 0;
    message.orderId = object.orderId ?? "";
    return message;
  },
};

function createBaseProcessPaymentResponse(): ProcessPaymentResponse {
  return { success: false, transactionId: "" };
}

export const ProcessPaymentResponse: MessageFns<ProcessPaymentResponse> = {
  encode(message: ProcessPaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.transactionId !== "") {
      writer.uint32(18).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessPaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessPaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessPaymentResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
    };
  },

  toJSON(message: ProcessPaymentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessPaymentResponse>, I>>(base?: I): ProcessPaymentResponse {
    return ProcessPaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessPaymentResponse>, I>>(object: I): ProcessPaymentResponse {
    const message = createBaseProcessPaymentResponse();
    message.success = object.success ?? false;
    message.transactionId = object.transactionId ?? "";
    return message;
  },
};

export type PaymentServiceService = typeof PaymentServiceService;
export const PaymentServiceService = {
  processPayment: {
    path: "/ecommerce.PaymentService/ProcessPayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ProcessPaymentRequest): Buffer =>
      Buffer.from(ProcessPaymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ProcessPaymentRequest => ProcessPaymentRequest.decode(value),
    responseSerialize: (value: ProcessPaymentResponse): Buffer =>
      Buffer.from(ProcessPaymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProcessPaymentResponse => ProcessPaymentResponse.decode(value),
  },
} as const;

export interface PaymentServiceServer extends UntypedServiceImplementation {
  processPayment: handleUnaryCall<ProcessPaymentRequest, ProcessPaymentResponse>;
}

export interface PaymentServiceClient extends Client {
  processPayment(
    request: ProcessPaymentRequest,
    callback: (error: ServiceError | null, response: ProcessPaymentResponse) => void,
  ): ClientUnaryCall;
  processPayment(
    request: ProcessPaymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProcessPaymentResponse) => void,
  ): ClientUnaryCall;
  processPayment(
    request: ProcessPaymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProcessPaymentResponse) => void,
  ): ClientUnaryCall;
}

export const PaymentServiceClient = makeGenericClientConstructor(
  PaymentServiceService,
  "ecommerce.PaymentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PaymentServiceClient;
  service: typeof PaymentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
