// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: inventory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { InventoryItem } from "./common";

export const protobufPackage = "ecommerce";

export interface CheckInventoryRequest {
  productIds: string[];
}

export interface CheckInventoryResponse {
  items: InventoryItem[];
}

export interface UpdateInventoryRequest {
  updates: InventoryUpdate[];
}

export interface InventoryUpdate {
  productId: string;
  /** positive to add, negative to subtract */
  delta: number;
}

export interface UpdateInventoryResponse {
  success: boolean;
}

function createBaseCheckInventoryRequest(): CheckInventoryRequest {
  return { productIds: [] };
}

export const CheckInventoryRequest: MessageFns<CheckInventoryRequest> = {
  encode(message: CheckInventoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.productIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckInventoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckInventoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckInventoryRequest {
    return {
      productIds: globalThis.Array.isArray(object?.productIds)
        ? object.productIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CheckInventoryRequest): unknown {
    const obj: any = {};
    if (message.productIds?.length) {
      obj.productIds = message.productIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckInventoryRequest>, I>>(base?: I): CheckInventoryRequest {
    return CheckInventoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckInventoryRequest>, I>>(object: I): CheckInventoryRequest {
    const message = createBaseCheckInventoryRequest();
    message.productIds = object.productIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckInventoryResponse(): CheckInventoryResponse {
  return { items: [] };
}

export const CheckInventoryResponse: MessageFns<CheckInventoryResponse> = {
  encode(message: CheckInventoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      InventoryItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckInventoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckInventoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(InventoryItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckInventoryResponse {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => InventoryItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: CheckInventoryResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => InventoryItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckInventoryResponse>, I>>(base?: I): CheckInventoryResponse {
    return CheckInventoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckInventoryResponse>, I>>(object: I): CheckInventoryResponse {
    const message = createBaseCheckInventoryResponse();
    message.items = object.items?.map((e) => InventoryItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateInventoryRequest(): UpdateInventoryRequest {
  return { updates: [] };
}

export const UpdateInventoryRequest: MessageFns<UpdateInventoryRequest> = {
  encode(message: UpdateInventoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.updates) {
      InventoryUpdate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInventoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInventoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.updates.push(InventoryUpdate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInventoryRequest {
    return {
      updates: globalThis.Array.isArray(object?.updates)
        ? object.updates.map((e: any) => InventoryUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateInventoryRequest): unknown {
    const obj: any = {};
    if (message.updates?.length) {
      obj.updates = message.updates.map((e) => InventoryUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateInventoryRequest>, I>>(base?: I): UpdateInventoryRequest {
    return UpdateInventoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateInventoryRequest>, I>>(object: I): UpdateInventoryRequest {
    const message = createBaseUpdateInventoryRequest();
    message.updates = object.updates?.map((e) => InventoryUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInventoryUpdate(): InventoryUpdate {
  return { productId: "", delta: 0 };
}

export const InventoryUpdate: MessageFns<InventoryUpdate> = {
  encode(message: InventoryUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.delta !== 0) {
      writer.uint32(16).int32(message.delta);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InventoryUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoryUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.delta = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoryUpdate {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      delta: isSet(object.delta) ? globalThis.Number(object.delta) : 0,
    };
  },

  toJSON(message: InventoryUpdate): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.delta !== 0) {
      obj.delta = Math.round(message.delta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoryUpdate>, I>>(base?: I): InventoryUpdate {
    return InventoryUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InventoryUpdate>, I>>(object: I): InventoryUpdate {
    const message = createBaseInventoryUpdate();
    message.productId = object.productId ?? "";
    message.delta = object.delta ?? 0;
    return message;
  },
};

function createBaseUpdateInventoryResponse(): UpdateInventoryResponse {
  return { success: false };
}

export const UpdateInventoryResponse: MessageFns<UpdateInventoryResponse> = {
  encode(message: UpdateInventoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInventoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInventoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInventoryResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdateInventoryResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateInventoryResponse>, I>>(base?: I): UpdateInventoryResponse {
    return UpdateInventoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateInventoryResponse>, I>>(object: I): UpdateInventoryResponse {
    const message = createBaseUpdateInventoryResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type InventoryServiceService = typeof InventoryServiceService;
export const InventoryServiceService = {
  checkInventory: {
    path: "/ecommerce.InventoryService/CheckInventory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckInventoryRequest): Buffer =>
      Buffer.from(CheckInventoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CheckInventoryRequest => CheckInventoryRequest.decode(value),
    responseSerialize: (value: CheckInventoryResponse): Buffer =>
      Buffer.from(CheckInventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CheckInventoryResponse => CheckInventoryResponse.decode(value),
  },
  updateInventory: {
    path: "/ecommerce.InventoryService/UpdateInventory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateInventoryRequest): Buffer =>
      Buffer.from(UpdateInventoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateInventoryRequest => UpdateInventoryRequest.decode(value),
    responseSerialize: (value: UpdateInventoryResponse): Buffer =>
      Buffer.from(UpdateInventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateInventoryResponse => UpdateInventoryResponse.decode(value),
  },
} as const;

export interface InventoryServiceServer extends UntypedServiceImplementation {
  checkInventory: handleUnaryCall<CheckInventoryRequest, CheckInventoryResponse>;
  updateInventory: handleUnaryCall<UpdateInventoryRequest, UpdateInventoryResponse>;
}

export interface InventoryServiceClient extends Client {
  checkInventory(
    request: CheckInventoryRequest,
    callback: (error: ServiceError | null, response: CheckInventoryResponse) => void,
  ): ClientUnaryCall;
  checkInventory(
    request: CheckInventoryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckInventoryResponse) => void,
  ): ClientUnaryCall;
  checkInventory(
    request: CheckInventoryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckInventoryResponse) => void,
  ): ClientUnaryCall;
  updateInventory(
    request: UpdateInventoryRequest,
    callback: (error: ServiceError | null, response: UpdateInventoryResponse) => void,
  ): ClientUnaryCall;
  updateInventory(
    request: UpdateInventoryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateInventoryResponse) => void,
  ): ClientUnaryCall;
  updateInventory(
    request: UpdateInventoryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateInventoryResponse) => void,
  ): ClientUnaryCall;
}

export const InventoryServiceClient = makeGenericClientConstructor(
  InventoryServiceService,
  "ecommerce.InventoryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InventoryServiceClient;
  service: typeof InventoryServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
